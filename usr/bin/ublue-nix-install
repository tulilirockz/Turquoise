#!/bin/bash
VERBOSITY="${VERBOSITY:-0}"
SUDO_PROGRAM="${SUDO_PROGRAM:-sudo}"
USER_WARNING="${USER_WARNING:-1}"
SYSTEMD_APP_NAME="ublue-nix-installer"
[ "$VERBOSITY" = "1" ] && set -x
set -euo pipefail

function log {
	LEVEL=$1
	shift
	echo "[${LEVEL}]" $@ | tee /dev/stderr | systemd-cat -t "$SYSTEMD_APP_NAME" -p "$LEVEL"
}

function selinux_context {
  CONTEXT=$1
  FOLDER=$2
  shift
  shift
  semanage fcontext -a -t "${CONTEXT}" "${FOLDER}"
}

function set_se_enforce {
  setenforce Enforcing
  log warning "Settings SELinux to Enforcing once again"
}


if [ "$EUID" != 0 ] ; then
  echo "Please run this script as root, or else nothing will work"
  exit
fi

echo "You can check all this script's detailed log on journalctl -f. Hide stderr to hide verbose messages."

log info "Adding SELinux content to /nix and /var/lib/nix"

mkdir -p /var/lib/nix

set +e
{
  selinux_context etc_t '/nix/store/[^/]+/etc(/.*)?' 
  selinux_context lib_t '/nix/store/[^/]+/lib(/.*)?' 
  selinux_context systemd_unit_file_t '/nix/store/[^/]+/lib/systemd/system(/.*)?' 
  selinux_context man_t '/nix/store/[^/]+/man(/.*)?' 
  selinux_context bin_t '/nix/store/[^/]+/s?bin(/.*)?' 
  selinux_context usr_t '/nix/store/[^/]+/share(/.*)?' 
  selinux_context var_run_t '/nix/var/nix/daemon-socket(/.*)?' 
  selinux_context usr_t '/nix/var/nix/profiles(/per-user/[^/]+)?/[^/]+'
} |& systemd-cat -t "$SYSTEMD_APP_NAME"

{
  selinux_context etc_t '/var/lib/nix/store/[^/]+/etc(/.*)?' 
  selinux_context lib_t '/var/lib/nix/store/[^/]+/lib(/.*)?' 
  selinux_context systemd_unit_file_t '/var/lib/nix/store/[^/]+/lib/systemd/system(/.*)?' 
  selinux_context man_t '/var/lib/nix/store/[^/]+/man(/.*)?' 
  selinux_context bin_t '/var/lib/nix/store/[^/]+/s?bin(/.*)?' 
  selinux_context usr_t '/var/lib/nix/store/[^/]+/share(/.*)?' 
  selinux_context var_run_t '/var/lib/nix/var/nix/daemon-socket(/.*)?' 
  selinux_context usr_t '/var/lib/nix/var/nix/profiles(/per-user/[^/]+)?/[^/]+'
} |& systemd-cat -t "$SYSTEMD_APP_NAME"
set -e

log info "Creating service files"

log info "Creating rootfs mkdir service"

tee /etc/systemd/system/mkdir-rootfs@.service <<EOF
[Unit]
Description=Enable mount points in / for ostree
ConditionPathExists=!%f
DefaultDependencies=no
Requires=local-fs-pre.target
After=local-fs-pre.target

[Service]
Type=oneshot
ExecStartPre=chattr -i /
ExecStart=mkdir -p '%f'
ExecStopPost=chattr +i /
EOF

log info "Creating nix.mount"

tee /etc/systemd/system/nix.mount <<EOF
[Unit]
Description=Nix Package Manager
DefaultDependencies=no
After=mkdir-rootfs@nix.service
Wants=mkdir-rootfs@nix.service
Before=sockets.target
After=ostree-remount.service
BindsTo=var.mount

[Mount]
What=/var/lib/nix
Where=/nix
Options=bind
Type=none
EOF

log info "Enabling mount and resetting SELinux context"

{
  systemctl daemon-reload 
  systemctl enable --now nix.mount 
  restorecon -RF /nix
} |& tee /dev/stderr | systemd-cat -t "$SYSTEMD_APP_NAME"

log warning "Temorarily setting SELinux to Permissive"

setenforce Permissive

trap set_se_enforce EXIT SIGINT

log info "Preparing the nix install script"

sh <(curl -L https://nixos.org/nix/install) --daemon --yes

log info "Nix installer has finished running"

log info "Creating SSL cert file"

mkdir -p /etc/systemd/system/nix-daemon.service.d/

tee /etc/systemd/system/nix-daemon.service.d/override.conf <<EOF
[Service]
Environment="NIX_SSL_CERT_FILE=/etc/ssl/certs/ca-bundle.crt"
EOF

set +e
{
  cp -f /nix/var/nix/profiles/default/lib/systemd/system/nix-daemon.{service,socket} /etc/systemd/system/ 
  restorecon -RF /nix 
  systemctl daemon-reload 
  systemctl enable --now nix-daemon.socket
} |& systemd-cat -t "${SYSTEMD_APP_NAME}"
set -e

set_se_enforce

log info "Adding experimental features to /etc/nix/nix.conf"
echo "experimental-features = nix-command flakes" | sudo tee -a /etc/nix/nix.conf

log info "Adding /etc/profile.d/nix-app-icons.sh"

[ -e "/etc/profile.d/nix-app-icons.sh" ] && rm -f "/etc/profile.d/nix-app-icons.sh"
echo 'XDG_DATA_DIRS="$HOME/.nix-profile/share:/nix/var/nix/profiles/default/share:$XDG_DATA_DIRS"' | tee /etc/profile.d/nix-app-icons.sh 

echo -e "Now make sure to reboot your system to start all nix-related services\nYou can run nix with . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'"